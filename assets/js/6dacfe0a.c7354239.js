"use strict";(self.webpackChunkhippy=self.webpackChunkhippy||[]).push([[3025],{3905:(e,n,t)=>{t.d(n,{Zo:()=>E,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},E=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,E=s(e,["components","mdxType","originalType","parentName"]),d=l(t),p=a,m=d["".concat(i,".").concat(p)]||d[p]||u[p]||o;return t?r.createElement(m,c(c({ref:n},E),{},{components:t})):r.createElement(m,c({ref:n},E))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9722:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:0},c="SQL",s={unversionedId:"basic/storage/sql",id:"basic/storage/sql",title:"SQL",description:"\u5165\u95e8\u6559\u7a0b w3schools\u3002",source:"@site/docs/basic/02-storage/sql.md",sourceDirName:"basic/02-storage",slug:"/basic/storage/sql",permalink:"/docs/basic/storage/sql",draft:!1,editUrl:"https://github.com/chenpeirui/chenpeirui.github.io/tree/main/docs/basic/02-storage/sql.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"basicSidebar",previous:{title:"UDP",permalink:"/docs/basic/network/osi/transport-layer/udp"},next:{title:"MongoDB",permalink:"/docs/basic/storage/mongodb"}},i={},l=[{value:"Query",id:"query",level:2},{value:"Condition",id:"condition",level:3},{value:"Order",id:"order",level:3},{value:"Limit",id:"limit",level:3},{value:"Group",id:"group",level:3},{value:"Join",id:"join",level:3},{value:"Insert, Update and Delete",id:"insert-update-and-delete",level:2},{value:"Functions",id:"functions",level:2},{value:"Stored Procedures",id:"stored-procedures",level:2},{value:"Advanced",id:"advanced",level:2},{value:"Admin",id:"admin",level:2},{value:"Help",id:"help",level:2},{value:"Best Practice",id:"best-practice",level:2}],E={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sql"},"SQL"),(0,a.kt)("p",null,"\u5165\u95e8\u6559\u7a0b ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3schools.com/sql/default.asp"},"w3schools"),"\u3002"),(0,a.kt)("h2",{id:"query"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT c1, c2 FROM t;\nSELECT * FROM t;\n\n-- alias column\nSELECT c1 alias1, c2 alias2 FROM t;\n-- alias table\nSELECT a.c1, b.c2 FROM tA a, tB b\nWHERE a.c1 = b.c2;\n\n-- DISTINCT\nSELECT DISTINCT c FROM t;\n")),(0,a.kt)("h3",{id:"condition"},"Condition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- =, >, <, <=, >=, <>\nSELECT * FROM t1\nWHERE c1 = 'str'\nWHERE c1 > 1\n\n-- BETWEEN AND\n-- begin and end values are included\n-- the values can be numbers, text, or dates\nWHERE c2 BETWEEN 1 AND 2 -- number\nWHERE c2 NOT BETWEEN 'a' AND 'c' -- text\nWHERE c2 BETWEEN #01/01/2020# AND #03/18/2020# -- date\nWHERE c2 BETWEEN '2020-01-01' AND '2020-03-18' -- date\n\n-- LIKE\n-- %: 0, 1, or multiple characters\n-- _: single character\nWHERE c3 LIKE '_b%' -- finds any values that have \"b\" in the second position\n\n-- IN (), NOT IN ()\nWHERE c4 IN ('red', 'green', 'blue')\nWHERE c4 NOT IN ('black', 'orange')\nWHERE c4 IN ( SELECT c4 FROM t2 );\n\n\n-- NULL, NOT NULL\nSELECT * FROM t\nWHERE c1 IS NULL\nWHERE c2 IS NOT NULL\n\n\n-- AND, OR, NOT\nSELECT * FROM t\nWHERE NOT c1 = 'child' OR ( c2 >= 18 AND c2 <= 200 );\n\n\n-- EXISTS\n-- is used to test for the existence of any record in a subquery\n-- returns true if the subquery returns one or more records.\nSELECT `name` FROM suppliers\nWHERE EXISTS (SELECT `name` FROM products WHERE products.supplierId = suppliers.id AND price < 20);\n\n\n-- ANY, ALL\n-- operator must be =, <>, !=, >, >=, <, or <=\nSELECT `name` FROM products\nWHERE `id` = ANY (SELECT productId FROM orders WHERE quantity = 10);\n")),(0,a.kt)("h3",{id:"order"},"Order"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT c1 FROM t\nORDER BY c1 ASC, c2 DESC;\n")),(0,a.kt)("h3",{id:"limit"},"Limit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- row_count\nSELECT c1 FROM t\nLIMIT 15;\n\n-- offset, row_count\nSELECT c1 FROM t\nLIMIT 0, 15;\n")),(0,a.kt)("h3",{id:"group"},"Group"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns\nSELECT COUNT(c1) c1Count, c2 FROM t\nGROUP BY c2\nORDER BY c1Count;\n\n-- HAVING\n-- used with aggregate functions\nSELECT COUNT(id) customerCount, country FROM customers\nGROUP BY country\nHAVING customerCount > 5\n")),(0,a.kt)("h3",{id:"join"},"Join"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://www.w3schools.com/sql/img_innerjoin.gif",alt:"inner-join"})," ",(0,a.kt)("img",{parentName:"p",src:"https://www.w3schools.com/sql/img_leftjoin.gif",alt:"left-join"})," ",(0,a.kt)("img",{parentName:"p",src:"https://www.w3schools.com/sql/img_rightjoin.gif",alt:"right-join"})," ",(0,a.kt)("img",{parentName:"p",src:"https://www.w3schools.com/sql/img_fulljoin.gif",alt:"full-outer-join"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- INNER JOIN\n-- selects records that have matching values in both tables\nSELECT a.c1, b.c2\nFROM a\nINNER JOIN b ON a.id = b.aId;\n\n-- join three tables\nSELECT a.c1, b.c2, c.c3\nFROM (( a\nINNER JOIN b ON a.id = b.aId )\nINNER JOIN c ON a.id = c.aId );\n\n-- LEFT JOIN\n-- returns all records from the left table (table1), and the matched records from the right table (table2)\n-- the result is NULL from the right side, if there is no match\nSELECT a.c1, b.c2\nFROM a\nLEFT JOIN b ON a.id = b.aId;\n\n-- RIGHT JOIN\nSELECT a.c1, b.c2\nFROM a\nRIGHT JOIN b ON a.id = b.aId;\n\n-- FULL (OUTER) JOIN\n-- returns all records when there is a match in left (table1) or right (table2) table records\nSELECT a.c1, b.c2\nFROM a\nFULL OUTER JOIN b ON a.id = b.aId;\n\n\n-- Self JOIN\n-- is a regular join, but the table is joined with itself\nSELECT a.name customer1, b.name customer2, a.city\nFROM customers a, customers b\nWHERE a.id <> b.id\nAND a.city = b.city\nORDER BY a.city;\n\n\n-- UNION\n-- combine the result-set of two or more SELECT statements\n-- select only *distinct* values by default\nSELECT col FROM a\nUNION\nSELECT col FROM b\n\n-- allow duplicate values\nSELECT c1, c2 FROM a\nUNION ALL\nSELECT c1, c2 FROM b\n")),(0,a.kt)("h2",{id:"insert-update-and-delete"},"Insert, Update and Delete"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- INSERT INTO\nINSERT INTO t\nVALUES (v1, v2, v3); -- make sure the order of the values is in the same order as the columns in the table\n\nINSERT INTO t\nVALUES (NULL, '', v3); -- user NULL or '' to indicate using default value\n\nINSERT INTO t (c1, c5, c3)\nVALUES (v1, v5, v3); -- pay attention to the order of cols and values\n\n\n-- UPDATE\nUPDATE t\nSET c1 = 'str', c3 = 1\nWHERE c1 IS NULL;\n\n\n-- DELETE FROM\nDELETE FROM t\nWHERE c1 = 1;\n")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("p",null,"Reference to ",(0,a.kt)("a",{parentName:"p",href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html"},"String Functions and Operators"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- MIN(), MAX(), COUNT(), AVG(), SUM()\nSELECT AVG(price) FROM t;\n\n-- CONCAT()\nSELECT CONCAT(addressLine1, ', ', postalCode, ', ', city, ', ', country) AS addressDetail\nFROM t;\n\n-- CHAR_LENGTH()\nSELECT c FROM t\nWHERE CHAR_LENGTH(`name`) < 3\n\n-- REPLACE()\nUPDATE t\nSET c1 = REPLACE(c1, 'from_str', 'to_str')\nWHERE b = 1;\n")),(0,a.kt)("h2",{id:"stored-procedures"},"Stored Procedures"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'-- create a procedure\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM customers\nGO;\n-- execute procedure\nEXEC SelectAllCustomers;\n\n-- create a procedure with parameter\nCREATE PROCEDURE SelectAllCustomers @city nvarchar(30)\nAS\nSELECT * FROM customers WHERE city = @city\nGO;\n-- execute procedure\nEXEC SelectAllCustomers @city = "London";\n')),(0,a.kt)("h2",{id:"advanced"},"Advanced"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- SELECT INTO\n-- copies data from one table into a new table\n-- the new table will be created with the column-names and types as defined in the old table\n-- you can create new column names using the AS clause\nSELECT *\nINTO b IN anotherDb\nFROM a;\n\nSELECT c1, c2\nINTO b\nFROM a;\n\n-- INSERT INTO SELECT\n-- copies data from one table and inserts it into another table\n-- 1. requires that data types in source and target tables match\n-- 2. the existing records in the target table are unaffected\nINSERT INTO b\nSELECT * FROM a;\n\nINSERT INTO b (c1, c2)\nSELECT c1, c2 FROM a;\n\n-- REPLACE INTO SELECT\n-- \u7528\u540e\u8005\u6570\u636e\u66ff\u6362\u524d\u8005\uff08\u5373\uff0c\u7528 6-2 \u66ff\u6362 4.2\uff09\nREPLACE INTO doc_state_info (doc_id, state_id, sub_state_id, content, user_id)\nSELECT doc_id, 4, 2, content, user_id FROM doc_state_info\nWHERE doc_id = 'gl21232025nzhffh' AND state_id = 6 and sub_state_id = 2;\n\n\n-- CASE\n-- if - then - else\n-- once a condition is true, it will stop reading and return the result\n-- if no conditions are true, it returns the value in the ELSE clause\n-- if there is no ELSE part and no conditions are true, it returns NULL\nSELECT c1\nCASE\n  WHEN age > 17 THEN 'adult'\n  WHEN age < 18 THEN 'minor'\n  ELSE ''\nEND AS ageStage\nFROM t;\n\n-- Opearte columns\n-- NULL\nSELECT `name`, unitPrice * (unitsInStock + unitsOnOrder)\nFROM products;\n-- in the example above, if any of the \"unitsOnOrder\" values are NULL, the result will be NULL\nSELECT `name`, unitPrice * (unitsInStock + IFNULL(unitsOnOrder, 0))\nFROM products;\n")),(0,a.kt)("h2",{id:"admin"},"Admin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- DATABASE\nSHOW DATABASES;\n\nCREATE DATABASE d;\n\nDROP DATABASE d;\n\n-- TABLE\nSHOW TABLES;\n\nDESC t;\nSHOW FULL COLUMNS FROM t;\n\nCREATE TABLE t (\n  c1 type1,\n  c2 type2\n);\n\nDROP TABLE t;\n\n-- Index\nSHOW INDEX FROM t;\n\nALTER TABLE t ADD UNIQUE `uniqueName`(c1, c2, c3);\n\nALTER TABLE t DROP INDEX constraint_name;\nALTER TABLE t DROP INDEX column_name;\n-- If it was defined unique using PRIMARY KEY clause, use:\nALTER TABLE t DROP PRIMARY KEY;\n")),(0,a.kt)("h2",{id:"help"},"Help"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"?\n-- or\nhelp\n")),(0,a.kt)("h2",{id:"best-practice"},"Best Practice"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Uppercase KEYWORD for easy read;"),(0,a.kt)("li",{parentName:"ul"},"Avoid using ",(0,a.kt)("inlineCode",{parentName:"li"},"*")," for performence;"),(0,a.kt)("li",{parentName:"ul"},"Use line break reasonably.")))}u.isMDXComponent=!0}}]);